{"diagram":{"elements":{"leftChildren":[],"note":"","watermark":"","children":[{"parent":"root","lineStyle":{"randomLineColor":"#7549C5"},"children":[{"parent":"02547f75338d16b5","children":[{"parent":"7c4792462a8dcbd7","children":[],"id":"712246b0468527ca","title":"// 创建签名者提取器。<br>// 这用于从交易中提取预期的签名者。<br>// 如果需要，每个通道可以有不同的签名者提取器。<br><b>signerAdapter := signerextraction.NewDefaultAdapter()</b><br>"},{"parent":"7c4792462a8dcbd7","children":[{"parent":"c1743e3eecf3eaf9","children":[],"id":"f0adecb734cdf28c","title":"// MEV:创建一个接受 1000 笔交易并消耗 20% 区块空间的 mev 配置。<br><b><font color=\"#e74f4c\">mevConfig</font></b> := base.LaneConfig{<b><font color=\"#e74f4c\">MaxBlockSpace:&nbsp; &nbsp;math.LegacyMustNewDecFromStr(\"0.2\"),</font></b><b><font color=\"#e74f4c\">MaxTxs:&nbsp; 1000,</font></b>SignerExtractor: signerAdapter,}"},{"parent":"c1743e3eecf3eaf9","children":[],"id":"90f74a3ca1ad614f","title":"// Match:为每个车道创建匹配处理程序。 这些匹配处理程序确定事务是否属于通道。<br><b><font color=\"#e74f4c\">factory</font></b> := mevlane.<b><font color=\"#e74f4c\">NewDefaultAuctionFactory</font></b>(signerAdapter)<br><b><font color=\"#e74f4c\">mevMatchHandler</font></b> := factory.<b><font color=\"#e74f4c\">MatchHandler</font></b>()<br>"},{"parent":"c1743e3eecf3eaf9","children":[],"id":"2601ce90be6eb06c","title":"创建对应的lane<br><b><font color=\"#e74f4c\">mevLane</font></b> := mevlane.<b>NewMEVLane</b>(<b>mevConfig</b>,<b>factory</b>,<b><font color=\"#e74f4c\">mevMatchHandler</font></b>,)<br>"}],"id":"c1743e3eecf3eaf9","title":"mev-lane"},{"parent":"7c4792462a8dcbd7","children":[{"parent":"50763ffcca30d99d","children":[],"id":"6ea34af79c01c3f5","title":"// Free:创建一个免费配置，接受 1000 笔交易并消耗 20% 的区块空间。<br><b><font color=\"#a23735\">freeConfig</font></b> := base.LaneConfig{<b><font color=\"#a23735\">MaxBlockSpace:&nbsp; &nbsp;math.LegacyMustNewDecFromStr(\"0.2\"),</font></b><b><font color=\"#a23735\">MaxTxs: 1000,&nbsp;</font></b>SignerExtractor: signerAdapter,}<br>"},{"parent":"50763ffcca30d99d","children":[],"id":"914794dad11bb8f2","title":"<b><font color=\"#a23735\">freeMatchHandler := freelane.DefaultMatchHandler()</font></b><br>"},{"parent":"50763ffcca30d99d","children":[],"id":"7274708b14a9ac58","title":"// 创建对应的lane<br><b><font color=\"#a23735\">freeLane</font></b> := freelane.<b>NewFreeLane</b>(<b><font color=\"#a23735\">freeConfig</font></b>,base.<b><font color=\"#a23735\">DefaultTxPriority</font></b>(),<b><font color=\"#a23735\">freeMatchHandler</font></b>,)<br>"}],"id":"50763ffcca30d99d","title":"free-lane"},{"parent":"7c4792462a8dcbd7","children":[{"parent":"4de4b14c95f9900f","children":[],"id":"a37611ecdce86c0b","title":"// <b><font color=\"#ec7270\">Default</font></b>:创建接受 1000 笔交易并消耗 60% 的默认配置块空间。<b><font color=\"#ec7270\"><br>defaultConfig</font></b> := base.LaneConfig{<b><font color=\"#ec7270\">MaxBlockSpace:&nbsp; &nbsp;math.LegacyMustNewDecFromStr(\"0.6\"),</font></b><font color=\"#ec7270\"><b>MaxTxs:&nbsp; 1000,</b></font>SignerExtractor: signerAdapter,}<br>"},{"parent":"4de4b14c95f9900f","children":[],"id":"14ceb820a9c2089c","title":"<b><font color=\"#ec7270\">defaultMatchHandler := </font><font color=\"#000000\">base</font><font color=\"#ec7270\">.DefaultMatchHandler()</font></b>"},{"parent":"4de4b14c95f9900f","children":[],"id":"55bf6709e5f226b0","title":"// 创建对应的lane<br><b><font color=\"#ec7270\">defaultLane</font></b> := defaultlane.<b>NewDefaultLane</b>(<b><font color=\"#ec7270\">defaultConfig</font></b>,<b><font color=\"#ec7270\">defaultMatchHandler</font></b>,)<br>"}],"id":"4de4b14c95f9900f","title":"default-lane"},{"parent":"7c4792462a8dcbd7","children":[],"id":"4f6290dae0a9353a","title":"返回：return <b><font color=\"#e74f4c\">mevLane</font>, <font color=\"#a23735\">freeLane</font>, <font color=\"#ec7270\">defaultLane</font></b>"}],"id":"7c4792462a8dcbd7","title":"// STEP 1-3-<b>CreateLanes</b>: Create the Block SDK lanes.<br><b><font color=\"#e74f4c\">mevLane</font></b>, <b><font color=\"#a23735\">freeLane</font></b>, <b><font color=\"#f19594\">defaultLane</font></b> := <b>CreateLanes</b>(app)"},{"parent":"02547f75338d16b5","children":[{"parent":"0bd4973717887442","children":[],"id":"60560d9e0068f247","title":"mempool := &amp;<b>LanedMempool</b>{<b>registry</b>:&nbsp; <b>lanes</b>,moduleLaneFetcher: laneFetcher,}"}],"id":"0bd4973717887442","title":"// 第 4 步-<b>LanedMempool</b>：根据通道构建内存池。<br>请注意，车道的顺序很重要。区块是从顶部车道到底部车道构建的。<br>顶部泳道是阵列中的第一条泳道，底部泳道是阵列中的最后泳道。<br><b>mempool</b> := block.<b>NewLanedMempool</b>([]block.Lane{<b><font color=\"#e74f4c\">mevLane</font></b>, <b><font color=\"#a23735\">freeLane</font></b>, <b><font color=\"#ec7270\">defaultLane</font></b>},&nbsp;&amp;app.blocksdkKeeper,)<br>"},{"parent":"02547f75338d16b5","children":[],"id":"84f3d35884af6faa","title":"// 应用程序的内存池现在由 Block SDK 提供支持！<br>app.App.<b>SetMempool</b>(<b>mempool</b>)"},{"parent":"02547f75338d16b5","children":[{"parent":"d6eb2983483b5daa","children":[],"id":"8c5883de85ec958b","title":"// 构建默认 SDK AnteHandler 所需的选项。<br><b>handlerOptions</b> := ante.HandlerOptions{<br>&nbsp; &nbsp; AccountKeeper:&nbsp; &nbsp;app.AccountKeeper,<br>&nbsp; &nbsp; BankKeeper:&nbsp; &nbsp; &nbsp; app.BankKeeper,<br>&nbsp; &nbsp; FeegrantKeeper:&nbsp; app.FeeGrantKeeper,<br>&nbsp; &nbsp; SigGasConsumer:&nbsp; ante.DefaultSigVerificationGasConsumer,<br>&nbsp; &nbsp; SignModeHandler: app.txConfig.SignModeHandler(),<br>}<br>"},{"parent":"d6eb2983483b5daa","children":[{"parent":"662b5d32f7591896","children":[{"parent":"3f1d69b87e688426","children":[],"id":"82e01b47ecc86139","title":"<b>//&nbsp;</b>如果交易属于其中一个通道，则调用下一个 AnteHandler。 <br>// 否则，调用装饰器的 AnteHandler。<b><br>IgnoreDecorator</b>.<b>AnteHandle</b>(tx sdk.Tx, simulate bool, <b>next</b> sdk.AnteHandler,){<br>&nbsp; &nbsp; for _, lane := range sd.<b>lanes</b> {<br>&nbsp; &nbsp; &nbsp; &nbsp; if lane.<b>Match</b>(ctx, tx) {return <b>next</b>(ctx, tx, simulate)}// 此lane的tx不扣除手续费，跳过<br>&nbsp; &nbsp; }<br>&nbsp; &nbsp; return sd.<b><font color=\"#4669ea\">decorator</font></b>.<b>AnteHandle</b>(ctx, tx, simulate, next) // 正常扣除手续费<br>}<br>"}],"id":"3f1d69b87e688426","title":"// 添加freelane的IgnoreDecorator,不扣除fee费用<br>block.<b>NewIgnoreDecorator</b>(<br>&nbsp; &nbsp; ante.<b><font color=\"#4669ea\">NewDeductFeeDecorator</font></b>(<br>&nbsp; &nbsp; &nbsp; &nbsp; options.BaseOptions.AccountKeeper,<br>&nbsp; &nbsp; &nbsp; &nbsp; options.BaseOptions.BankKeeper,<br>&nbsp; &nbsp; &nbsp; &nbsp; options.BaseOptions.FeegrantKeeper,<br>&nbsp; &nbsp; &nbsp; &nbsp; options.BaseOptions.TxFeeChecker,<br>&nbsp; &nbsp; ),<br><b><font color=\"#a23735\">&nbsp; &nbsp; options.FreeLane,</font></b><br>),<br>"},{"parent":"662b5d32f7591896","children":[{"parent":"1642f6b06c2aad02","children":[],"id":"e699441ed901cc9e","title":"<br>bidInfo := ad.lane.GetAuctionBidInfo(tx)<br>"}],"id":"1642f6b06c2aad02","title":"// 添加mevlane对应的拍卖交易的检测<br>// 验证拍卖出价是否有效。如果有效，将从投标人的帐户中扣除入场费。<br>auctionante.<b><font color=\"#e74f4c\">NewAuctionDecorator</font></b>(options.<b>auctionkeeper</b>, options.<b><font color=\"#e74f4c\">MEVLane</font></b>)<br>"}],"id":"662b5d32f7591896","title":"// 构建block-sdk&nbsp;AnteHandler 选项<br><b>options := BSDKHandlerOptions{</b><br><b>&nbsp; &nbsp; BaseOptions</b>:&nbsp; &nbsp;<b>handlerOptions</b>,<br>&nbsp; &nbsp; <b>auctionkeeper</b>: app.auctionkeeper,<br>&nbsp; &nbsp; <b><font color=\"#a23735\">FreeLane</font></b>:&nbsp; &nbsp; &nbsp; freeLane,<br>&nbsp; &nbsp; <b><font color=\"#e74f4c\">MEVLane</font></b>:&nbsp; &nbsp; &nbsp; &nbsp;mevLane,<br>}<br>"},{"parent":"d6eb2983483b5daa","children":[],"id":"f3a0b2ce9a6b22e7","title":"// 设置全局anteHandler&nbsp;<br><b>anteHandler</b> := <b>NewBSDKAnteHandler</b>(<b>options</b>)<br>app.App.<b>SetAnteHandler</b>(<b>anteHandler</b>)<br>"},{"parent":"d6eb2983483b5daa","children":[{"parent":"4f4009ea258df875","children":[],"id":"7b9cc1b84bcc3c8a","title":"<b><font color=\"#e74f4c\">mevLane</font></b>.WithOptions(<b>opt</b>...,)<br>"},{"parent":"4f4009ea258df875","children":[],"id":"d208d19ded44f793","title":"<b><font color=\"#a23735\">freeLane</font></b>.WithOptions(<b>opt</b>...,)<br>"},{"parent":"4f4009ea258df875","children":[],"id":"b42bb8018135300e","title":"<b><font color=\"#ec7270\">defaultLane</font></b>.WithOptions(<b>opt</b>...,)"}],"id":"4f4009ea258df875","title":"// 在lanes上设置ante&nbsp; handler<br><b>opt</b> := []base.LaneOption{<br>&nbsp; &nbsp; base.<b>WithAnteHandler</b>(<b>anteHandler</b>),<br>}<br>"}],"id":"d6eb2983483b5daa","title":"// 第 5 步-<b>anteHandler</b>：创建一个全局ante处理程序，<br>// 在构建和验证提案时将在每个交易上调用该处理程序。<br>// 必须在将ante处理程序设置到lanes上之前完成此步骤。<br>"},{"parent":"02547f75338d16b5","children":[{"parent":"cee3f99a1ce4a23c","children":[],"id":"447c9c2640f2ffac","title":"<b>proposalHandler</b> := abci.<b>NewProposalHandler</b>(<b>mempool</b>,)<br>"},{"parent":"cee3f99a1ce4a23c","children":[],"id":"548a9c41f3e639b2","title":"<br>app.App.<b><font color=\"#7bd144\">SetPrepareProposal</font></b>(proposalHandler.<b><font color=\"#7bd144\">PrepareProposalHandler</font></b>())<br>"},{"parent":"cee3f99a1ce4a23c","children":[],"id":"25108233cf4fc5df","title":"app.App.<b><font color=\"#7bd144\">SetProcessProposal</font></b>(proposalHandler.<b><font color=\"#7bd144\">ProcessProposalHandler</font></b>())"}],"id":"cee3f99a1ce4a23c","title":"// 步骤 6-<b>proposalHandler</b>：<br>// 创建提案处理程序并将其设置在应用程序上。<br>// 应用程序将使用 Block SDK 构建并验证提案！<br>"},{"parent":"02547f75338d16b5","children":[{"parent":"18082107d56f4078","children":[],"id":"60278d460954d9ff","title":"<b><font color=\"#e74f4c\">mevCheckTx</font></b> := checktx.<b>NewMEVCheckTxHandler</b>(app.App,<b>mevLane</b>,<b>anteHandler</b>,app.App.<b>CheckTx</b>,)<br>"},{"parent":"18082107d56f4078","children":[],"id":"8d82e74eadcd46da","title":"<br><b><font color=\"#e74f4c\">checkTxHandler</font></b> := checktx.<b>NewMempoolParityCheckTx</b>(<b>mempool</b>,<b><font color=\"#e74f4c\">mevCheckTx</font></b>.<b>CheckTx</b>(),)<br>"},{"parent":"18082107d56f4078","children":[],"id":"0d407314962cb48c","title":"app.<b>SetCheckTx</b>(checkTxHandler.<b><font color=\"#e74f4c\">CheckTx</font></b>())"}],"id":"18082107d56f4078","title":"// 步骤 7-<b>Mev-CheckTx</b>：在 BaseApp 上设置自定义 CheckTx 处理程序。 <br>// 仅当您使用 <b><font color=\"#e74f4c\">MEV</font></b> 车道时才需要这样做。<br>"}],"id":"02547f75338d16b5","title":"具体使用案例<br>app.go"},{"parent":"root","lineStyle":{"randomLineColor":"#BE49C4"},"children":[{"parent":"1f26d933e8792aeb","children":[{"parent":"6755be7e4abc4902","children":[],"id":"fbff35a788229eff","title":"// blockMempool的接口定义<br><b>Mempool interface {</b><br><b>sdkmempool</b>.Mempool<br><br><b>Registry</b>() // 返回内存池的通道注册表.<br><b>Contains</b>(tx sdk.Tx) bool&nbsp;// 如果任何通道当前包含交易，则返回 true<br><b>GetTxDistribution</b>() map[string]uint64// 返回每个通道中的事务数<br>}<br>"}],"id":"6755be7e4abc4902","title":"<b>ProposalHandler</b> struct {<br>&nbsp; &nbsp; <b>mempool&nbsp; &nbsp;block.Mempool</b><br>}"},{"parent":"1f26d933e8792aeb","children":[{"parent":"2d8e8514449df812","children":[],"id":"238e31b9faae9544","title":"return &amp;<b>ProposalHandler</b>{mempool:&nbsp; &nbsp;mempool,}<br>"}],"id":"2d8e8514449df812","title":"<b>NewProposalHandler</b>(block.Mempool)&nbsp;"},{"parent":"1f26d933e8792aeb","children":[{"parent":"a1bb0f1b3d60aa3d","children":[],"id":"ae9d0aa157fdb43b","title":"获取已注册的lane<br><b>registry</b> := h.mempool.<b>Registry</b>()<br>"},{"parent":"a1bb0f1b3d60aa3d","children":[],"id":"e7c5be70940caa4d","title":"// 获取提案的最大gaslimit和最大块大小。构建一个提案结构体<br><b>maxGasLimit</b> := proposals.<b>GetBlockLimits</b>(ctx)<br><b>proposal</b> := proposals.<b>NewProposal</b>(req.<b>MaxTxBytes</b>, <b>maxGasLimit</b>)"},{"parent":"a1bb0f1b3d60aa3d","children":[{"parent":"e0ea96b6b9722013","children":[],"id":"85049afbfdef38e1","title":"// 默认添加一个终结lane以简化链接代码，<br>// 这样我们就不需要检查链上的 next == nil 是否存在<br>if (chain[len(chain)-1] != terminator.Terminator{}) {<br>&nbsp; &nbsp; <b>chain = append(chain, terminator.Terminator{})</b><br>}<br>"},{"parent":"e0ea96b6b9722013","children":[],"id":"14c6b052d09a813c","title":"// <b>ChainPrepareLanes</b> 将每个lane的提案准备逻辑链接到一个函数中。<br>// 链中的第一个lane是要准备的第一个车道，链中的最后一个车道是要准备的最后一个车道。<br>// 如果任何lane未能准备部分提案，则将跳过失败的通道，并调用链中的下一个通道来准备提案。<br>// 递归调用每个lane的PrepareLane接口<br>return chain[0].<b><font color=\"#7bd144\">PrepareLane</font></b>(<b>partialProposal</b>,<b>ChainPrepareLanes</b>(<b>chain</b>[1:]),)<br>"}],"id":"e0ea96b6b9722013","title":"// 调用每个lane的交易填充提案。<br><b>prepareLanesHandler</b> := <b>ChainPrepareLanes</b>(registry)<br><b><font color=\"#7bd144\">finalProposal</font></b> := <b>prepareLanesHandler</b>(<b>proposal</b>)<br>"},{"parent":"a1bb0f1b3d60aa3d","children":[],"id":"b2163c97984d65d9","title":"返回最终的提案交易<br>return &amp;abci.ResponsePrepareProposal{Txs: <b><font color=\"#7bd144\">finalProposal</font></b>.<b><font color=\"#7bd144\">Txs</font></b>,}<br>"}],"id":"a1bb0f1b3d60aa3d","title":"准备提案时的处理函数<br><b><font color=\"#7bd144\">PrepareProposalHandler</font></b>()<br>"},{"parent":"1f26d933e8792aeb","children":[{"parent":"1a2469bbf6ab4294","children":[],"id":"e18889ab557b2643","title":"// 解码提案中的交易，这些将由每个通道以贪婪的方式进行验证。<br><b>decodedTxs</b> := utils.<b>GetDecodedTxs</b>(h.txDecoder, req.<b>Txs</b>)"},{"parent":"1a2469bbf6ab4294","children":[],"id":"1f858665169eada8","title":"<b>registry</b> := h.mempool.<b>Registry()</b>"},{"parent":"1a2469bbf6ab4294","children":[{"parent":"6c570cf9d6eed89b","children":[],"id":"1366fda1433e24b5","title":"// 添加一个终结lane<br>if (chain[len(chain)-1] != terminator.Terminator{}) {<br>&nbsp; &nbsp; <b>chain = append(chain, terminator.Terminator{}</b>)<br>}"},{"parent":"6c570cf9d6eed89b","children":[],"id":"977c323b028427b6","title":"// ChainProcessLanes 将每个通道的提案验证逻辑链接到一个函数中。<br>// 链中的第一个车道是要验证的第一个车道，链中的最后一个车道是要验证的最后一个车道。<br>// 每个通道将验证属于该通道的交易，并将任何剩余交易传递到链中的下一个通道。<br>// 如果任何通道无法验证交易，该提案将被拒绝。<br>// 如果所有通道处理完毕后仍有剩余交易，则该提案将被拒绝。<br>// 调用第一个lane的ProcessLane接口<br><b>lane := chain[0]</b><br>return lane.<b><font color=\"#569230\">ProcessLane</font></b>(<b><font color=\"#e74f4c\">proposal</font></b>, <b>txs</b>, <b>ChainProcessLanes</b>(chain[1:]))<br>"}],"id":"6c570cf9d6eed89b","title":"// 递归调用每个lane验证提案中的tx,<br>传入一个空的提案<font color=\"#e74f4c\">proposals，</font><font color=\"#000000\">用于输出验证通过的所有tx</font><br><b><font color=\"#569230\">processLanesHandler</font></b> := <b><font color=\"#569230\">ChainProcessLanes</font></b>(registry)<br><b><font color=\"#e74f4c\">finalProposal</font></b> := <b><font color=\"#569230\">processLanesHandler</font></b>(<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b><font color=\"#e74f4c\">proposals</font></b>.NewProposalWithContext(),<br><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; decodedTxs</b><br>)<br>"},{"parent":"1a2469bbf6ab4294","children":[],"id":"f3b8e342746e9f46","title":"返回accept<br>return &amp;abci.ResponseProcessProposal{Status: abci.<b><font color=\"#569230\">ResponseProcessProposal_ACCEPT</font></b>}<br>"}],"id":"1a2469bbf6ab4294","title":"// 根据每个lane的验证逻辑验证proposal中的所有交易。<br>//&nbsp;通道将验证提案中属于该通道的所有交易，<br>// 并将任何剩余交易传递到链中的下一个通道。<br><b><font color=\"#569230\">ProcessProposalHandler</font></b><br>"}],"id":"1f26d933e8792aeb","title":"<b>从</b>Lane-<b>mempool拉取tx并验证<br>ABCI:ProposalHandler</b><br>"},{"parent":"root","lineStyle":{"randomLineColor":"#0FBAB0"},"children":[{"parent":"2c9bee92e41b0ea5","children":[{"parent":"0ca3bf438b2074fb","children":[],"id":"f38d2d72416ecb15","title":"<b>BaseLane</b> struct {<br><b>cfg</b> LaneConfig<br><b>laneName</b> string<br><b>block.LaneMempool</b><br><br><b>matchHandler</b>&nbsp;// 确定事务是否应该由该通道处理的函数。<br><b>prepareLaneHandler</b>&nbsp;//在请求新提案并且通道需要提交它想要包含在块中的交易时调用的函数。<br><b>processLaneHandler</b>&nbsp;//在验证新提案时调用的函数，并且通道需要验证提案中包含的交易是否有效（尊重通道的验证逻辑）。<br>}"},{"parent":"0ca3bf438b2074fb","children":[{"parent":"e0935b43d8ebcff2","children":[],"id":"29fd714d45db885c","title":"<b>ValidateBasic</b>()"},{"parent":"e0935b43d8ebcff2","children":[],"id":"4cc2315f66067632","title":"<b>Match</b>(tx sdk.Tx) bool {return l.<b>matchHandler</b>(ctx, tx)}"},{"parent":"e0935b43d8ebcff2","children":[],"id":"16169d0dc150d673","title":"<b>GetMaxBlockSpace</b>(){return l.cfg.<b>MaxBlockSpace</b>}"}],"id":"e0935b43d8ebcff2","title":"<b>BaseLane实现的接口</b>"},{"parent":"0ca3bf438b2074fb","children":[{"parent":"a769dd327790601a","children":[],"id":"32564b29a06d8ca0","title":"构建lane结构体<br><b>lane</b> := &amp;<b>BaseLane</b>{cfg: cfg,laneName: laneName,}<br>"},{"parent":"a769dd327790601a","children":[{"parent":"e9059fe0a7fb727e","children":[],"id":"2f0fec65fae7af0e","title":"return &amp;<b>Mempool</b>[C]{<br>&nbsp; &nbsp; index: <b>NewPriorityMempool</b>(<br>&nbsp; &nbsp; &nbsp; &nbsp; PriorityNonceMempoolConfig[C]{<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>TxPriority: txPriority,<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; MaxTx:&nbsp; &nbsp; &nbsp; maxTx,</b><br>&nbsp; &nbsp; &nbsp; &nbsp; },<br>&nbsp; &nbsp; &nbsp; &nbsp; extractor,<br>&nbsp; &nbsp; ),<br>&nbsp; &nbsp; extractor:&nbsp; extractor,<br><b>&nbsp; &nbsp; txPriority: txPriority,</b><br>}"}],"id":"e9059fe0a7fb727e","title":"构建lane-mempool<br><b>lane.LaneMempool </b>= <b>NewMempool</b>(<b>DefaultTxPriority</b>(),lane.cfg.SignerExtractor,lane.cfg.<b>MaxTxs</b>,)<br>"},{"parent":"a769dd327790601a","children":[{"parent":"e10fa26d6a70432c","children":[],"id":"d335374816b86b9c","title":"默认匹配所有交易<br>return true<br>"}],"id":"e10fa26d6a70432c","title":"挂接此lane的匹配接口<br><b>lane.matchHandler </b>= <b>DefaultMatchHandler</b>()<br>"},{"parent":"a769dd327790601a","children":[],"id":"a21c3c6c9308817b","title":"挂接提案处理handler<br><b>handler</b> := <b>NewDefaultProposalHandler</b>(lane)<br>lane.<b><font color=\"#7bd144\">prepareLaneHandler</font></b> = handler.<b>PrepareLaneHandler</b>()<br>lane.<b><font color=\"#569230\">processLaneHandler</font></b> = handler.<b>ProcessLaneHandler</b>()<br>"},{"parent":"a769dd327790601a","children":[],"id":"4b3f3c885e87356c","title":"执行此lane的option选项<br>for _, option := range options {<b>option(lane)</b>}<br>"},{"parent":"a769dd327790601a","children":[],"id":"9fbb9916803e04e7","title":"验证此lane合法<br><b>lane.ValidateBasic()</b><br>"}],"id":"a769dd327790601a","title":"<b>NewBaseLane</b>()"},{"parent":"0ca3bf438b2074fb","children":[{"parent":"a336e113d9cf57bb","children":[{"parent":"c5b7b8fc0bacd4e2","children":[],"id":"94ef717863b85b08","title":"<b>txBytes</b> = <b>ratio</b>.MulInt64(p.Info.<b>MaxBlockSize</b>)"},{"parent":"c5b7b8fc0bacd4e2","children":[],"id":"0ff2b03f69f0d014","title":"<b>gasLimit</b> = <b>ratio</b>.MulInt((p.Info.<b>MaxGasLimit</b>))"},{"parent":"c5b7b8fc0bacd4e2","children":[],"id":"cfd460b88be81a9a","title":"return <b>LaneLimits</b>{MaxTxBytes:&nbsp; <b>txBytes</b>,MaxGasLimit: <b>gasLimit</b>,}"}],"id":"c5b7b8fc0bacd4e2","title":"//根据通道的选择逻辑和通道的最大块空间从通道中选择交易。<br><b>limit</b> := proposal.<b>GetLaneLimits</b>(l.cfg.<b>MaxBlockSpace</b>)<br>"},{"parent":"a336e113d9cf57bb","children":[],"id":"367a3a059782fa17","title":"<b>调用挂接的具体lane的准备阶段的处理handler<br>txsToInclude</b>, <b>txsToRemove</b> := l.<b><font color=\"#7bd144\">prepareLaneHandler</font></b>(<b>proposal</b>, <b>limit</b>)<br>"},{"parent":"a336e113d9cf57bb","children":[],"id":"a157acda04086a59","title":"// 删除在创建部分提案期间无效的所有交易。<br>utils.<b>RemoveTxsFromLane</b>(<b>txsToRemove</b>, l)"},{"parent":"a336e113d9cf57bb","children":[],"id":"5f55953d3948dee2","title":"// 获取所选每笔交易的交易信息。<br>for i, tx := range <b>txsToInclude</b> {&nbsp;<b>txsWithInfo</b>[i] := l.<b>GetTxInfo</b>(tx)}<br>"},{"parent":"a336e113d9cf57bb","children":[],"id":"871376a52cb03749","title":"// 使用本lane选定的交易更新提案。<br>proposal.<b>UpdateProposal</b>(l, <b>txsWithInfo</b>)<br>"},{"parent":"a336e113d9cf57bb","children":[],"id":"465ad00be9fbb4f5","title":"继续下一个lane的处理<br>return <b><font color=\"#7bd144\">next</font></b>(<b>proposal</b>)<br>"}],"id":"a336e113d9cf57bb","title":"// 为lane准备部分提案。<br>// 根据prepareLaneHandler的选择逻辑从lane中选择tx。<br>// 使用所选交易更新部分提案。<b><br><font color=\"#7bd144\">PrepareLane</font></b>(proposals.<b>Proposal</b>,block.<b>PrepareLanesHandler</b>)<br>"},{"parent":"0ca3bf438b2074fb","children":[{"parent":"90bb959a78376156","children":[],"id":"f42ac5010e9013a8","title":"// 验证属于该lane的交易并返回必须由链中下一个通道验证的剩余交易。<br><b><font color=\"#569230\">txsFromLane</font></b>, <b><font color=\"#95da69\">remainingTxs</font></b>&nbsp;:= l.<b><font color=\"#569230\">processLaneHandler</font></b>(txs)"},{"parent":"90bb959a78376156","children":[],"id":"8c35d25dc87251a6","title":"// 检索属于该通道的每笔交易的交易信息。<br>for i, tx := range <b><font color=\"#569230\">txsFromLane</font></b> {<br>&nbsp; &nbsp;&nbsp;<b><font color=\"#569230\">txsWithInfo</font></b>[i]&nbsp; := l.<b>GetTxInfo</b>(tx)<br>}<br>"},{"parent":"90bb959a78376156","children":[],"id":"69deb3fedb91d846","title":"// 使用当前lane的合法tx更新提案信息<br><b><font color=\"#e74f4c\">proposal</font></b>.<b>UpdateProposal</b>(l, <b><font color=\"#569230\">txsWithInfo</font></b>);<br>"},{"parent":"90bb959a78376156","children":[],"id":"4b4dac51dc62a8ae","title":"// 使用链中的下一个通道验证剩余交易。<br>return <b><font color=\"#95da69\">next</font></b>(<font color=\"#e74f4c\"><b>proposal</b></font>, <b><font color=\"#95da69\">remainingTxs</font></b>)"}],"id":"90bb959a78376156","title":"// 根据通道的验证逻辑验证块提案中包含的交易是否有效。<br>// 如果所有交易均有效，我们将返回更新后的提案。<b><br><font color=\"#569230\">ProcessLane</font></b>(<b><font color=\"#e74f4c\">proposal</font></b>,<b>txs</b>,<b><font color=\"#95da69\">next</font></b> block.<b>ProcessLanesHandler</b>,)<br>"},{"parent":"0ca3bf438b2074fb","children":[{"parent":"5dc7f62e5da5bafe","children":[],"id":"bd033e4a2fa0c0a2","title":"l.cfg.<b>AnteHandler</b>(tx)"}],"id":"5dc7f62e5da5bafe","title":"<b>VerifyTx</b>( tx sdk.Tx)"},{"parent":"0ca3bf438b2074fb","children":[{"parent":"bbf47801a9aab21b","children":[],"id":"0f8ba108fb0f70a0","title":"<b>WithAnteHandler</b>(sdk.AnteHandler) LaneOption {&nbsp;l.cfg.<b>AnteHandler = anteHandler </b>}"},{"parent":"bbf47801a9aab21b","children":[],"id":"505713cea934db21","title":"<b><font color=\"#7bd144\">WithPrepareLaneHandler</font></b>(PrepareLaneHandler) LaneOption {l.<b><font color=\"#7bd144\">prepareLaneHandler = prepareLaneHandle</font></b>r}"},{"parent":"bbf47801a9aab21b","children":[],"id":"1f08838630c10240","title":"<b><font color=\"#7bd144\">WithProcessLaneHandler</font></b>(ProcessLaneHandler) LaneOption {l.<b>processLaneHandler = <font color=\"#7bd144\">processLaneHandler</font></b>}"},{"parent":"bbf47801a9aab21b","children":[],"id":"6764d5b50915c1af","title":"<b>WithMatchHandler</b>(matchHandler MatchHandler) LaneOption {l.<b>matchHandler = matchHandler</b>}"}],"id":"bbf47801a9aab21b","title":"设置lane的属性字段<br><b>LaneOption</b><br>"},{"parent":"0ca3bf438b2074fb","children":[{"parent":"52a999bac05b27ae","children":[{"parent":"4ae4633be2672c7c","children":[],"id":"3fff1c3446e9a283","title":"// 获取txinfo<br><b>tx</b> := iterator.Tx()<br><b>txInfo</b> := <b>h.lane.GetTxInfo(tx)</b><br>"},{"parent":"4ae4633be2672c7c","children":[],"id":"0d67e33e895e1cb0","title":"// 再次检测此tx属于此lane<br><b>h.lane.Match(tx)</b><br>"},{"parent":"4ae4633be2672c7c","children":[],"id":"f680fa3a2c54e4cd","title":"// 校验此tx的大小合法<br><b>updatedSize := totalSize + txInfo.Size; <br>updatedSize &lt;= limit.MaxTxBytes&nbsp;</b><br>"},{"parent":"4ae4633be2672c7c","children":[],"id":"f9322cab4890ad2d","title":"// 校验此tx的gaslimit合法<br><b>updatedGas := totalGas + txInfo.GasLimit; <br>updatedGas &lt; = limit.MaxGasLimit</b><br>"},{"parent":"4ae4633be2672c7c","children":[],"id":"8ce384535213811f","title":"// 验证此tx合法<br><b>h.lane.VerifyTx(tx, false)</b><br>"},{"parent":"4ae4633be2672c7c","children":[],"id":"c02fca84eaadbc82","title":"统计totalsize和totalgas并添加tx<br><b>totalSize += txInfo.Size<br>totalGas += txInfo.GasLimit<br>txsToInclude = append(txsToInclude, </b>tx)<br>"},{"parent":"4ae4633be2672c7c","children":[],"id":"9516be7652cba5b5","title":"返回：<br>return <b>txsToInclude</b>, <b>txsToRemove</b><br>"}],"id":"4ae4633be2672c7c","title":"<b>// 选择内存池中所有有效交易。</b><br><b><font color=\"#000000\">// 输出需要加入提案的合法tx</font><br><font color=\"#7bd144\">PrepareLaneHandler(){</font></b><br>&nbsp; &nbsp; for iterator := h.lane.Select(); <br>&nbsp; &nbsp; &nbsp; &nbsp; iterator = iterator.Next() <br>}<br>"},{"parent":"52a999bac05b27ae","children":[{"parent":"92f5a9819ed83bde","children":[{"parent":"7084cc814e5b524f","children":[{"parent":"f2ffeea937df9279","children":[],"id":"dc9cfa7856d72e6c","title":"// 如果交易不属于该通道，则返回剩余交易,由next lane验证<br>return<b><font color=\"#569230\"> partialProposal[:index]</font></b>, <b><font color=\"#95da69\">partialProposal[index:]</font></b>, nil<br>"}],"id":"f2ffeea937df9279","title":"不是本lane的tx<br>!h.lane.Match(tx)<br>"},{"parent":"7084cc814e5b524f","children":[{"parent":"6db8287a9675ff77","children":[],"id":"7e37d3617c662b3d","title":"h.lane.<b><font color=\"#569230\">VerifyTx</font></b>(tx, false)"}],"id":"6db8287a9675ff77","title":"验证本lane的tx交易合法"}],"id":"7084cc814e5b524f","title":"遍历所有tx,找到非本lane的交易即刻返回<br>for index, tx := range <b>txs</b> {<br><br>}<br>"},{"parent":"92f5a9819ed83bde","children":[],"id":"fb93dc255b19d736","title":"// 这意味着我们已经处理了部分提案中的所有交易，<br>// 即所有的交易都属于这条通道。 没有剩余交易。<br>return <b><font color=\"#569230\">partialProposal</font></b>, nil, nil<br>"}],"id":"92f5a9819ed83bde","title":"//&nbsp; 它验证以下不变量：<br>// 1. 属于该通道的交易必须从部分提案的开头开始是连续的。<br>// 2. 不属于该通道的交易必须从部分提案的末尾开始是连续的。<br>// 3. 必须根据通道定义的优先级（例如 Gas 价格）对交易进行排序。<br>// 4. 根据通道的验证逻辑，交易必须是有效的。<b><font color=\"#7bd144\"><br>ProcessLaneHandler(txs)</font></b><br>"}],"id":"52a999bac05b27ae","title":"<b>DefaultProposal</b>"}],"collapsed":false,"id":"0ca3bf438b2074fb","title":"<b>BaseLane结构体及接口<br>其他lane继承baselane<br>base-lane</b><br>"},{"parent":"2c9bee92e41b0ea5","children":[{"parent":"32f9caa34979ba05","children":[{"parent":"91a41e072e6da320","children":[],"id":"b68bbb1576d090af","title":"<b>ProposalInfo</b> {<br>&nbsp; map&lt;string, uint64&gt; <b>txs_by_lane</b> = 1;// 记录本提案中每个lane的交易数量<br>&nbsp;&nbsp;<b>max_block_size</b> = 2;//本提案设置的最大size<br>&nbsp;&nbsp;<b>max_gas_limit</b> = 3;//本提案设置的最大gas-limit<br>&nbsp;&nbsp;<b>block_size</b> = 4;&nbsp;//本提案已占用的size<br>&nbsp;&nbsp;<b>gas_limit</b> = 5;//本提案已占用的gas-limit<br>}"}],"id":"91a41e072e6da320","title":"<b>Proposal</b> struct {<br>&nbsp; &nbsp; Txs [][]byte<br>&nbsp; &nbsp; <b>Info</b> types.<b>ProposalInfo</b><br>}"},{"parent":"32f9caa34979ba05","children":[{"parent":"864bec140ea47104","children":[],"id":"93995af35c9e9776","title":"return <b>Proposal</b>{<br>&nbsp; &nbsp; <b>Txs</b>:&nbsp; &nbsp; make([][]byte, 0),<br>&nbsp; &nbsp; Info: types.<b>ProposalInfo</b>{<br>&nbsp; &nbsp; &nbsp; &nbsp; <b>TxsByLane</b>:&nbsp; make(map[string]uint64),<br>&nbsp; &nbsp; &nbsp; &nbsp; <b>MaxBlockSize</b>: maxBlockSize,<br>&nbsp; &nbsp; &nbsp; &nbsp; <b>MaxGasLimit</b>:&nbsp; maxGasLimit,},<br>}<br>"}],"id":"864bec140ea47104","title":"<b>NewProposal</b>(maxBlockSize, maxGasLimit)"},{"parent":"32f9caa34979ba05","children":[{"parent":"884515e59ed1f155","children":[],"id":"0bdd25959a567f40","title":"// 聚合此lane的部分交易信息<br>for index, tx := range <b>partialProposal</b> {<br>&nbsp; &nbsp; <b>hashes[tx.Hash]</b> = struct{}{}<br>&nbsp; &nbsp; <b>partialProposalSize += tx.Size<br>&nbsp; &nbsp; partialProposalGasLimit += tx.GasLimit</b><br>&nbsp; &nbsp; <b>txs[index] = tx.TxBytes</b><br>}"},{"parent":"884515e59ed1f155","children":[],"id":"39d0349caec6733b","title":"校验此lane交易的size和gas合法<br><b>limit</b> := p.<b>GetLaneLimits</b>(lane.GetMaxBlockSpace())<br><b>partialProposalSize</b> &lt;=&nbsp; <b>limit</b>.MaxTxBytes&nbsp;<br><b>partialProposalGasLimit</b> &lt;= limit.MaxGasLimit<br>"},{"parent":"884515e59ed1f155","children":[],"id":"ef4ed9f828677b85","title":"// 校验加入此lane的交易后block的size和gas是否合法,<br>// p.Info.BlockSize：此提案已占据的size<br>// p.Info.GasLimit:此提案已占用的gas<br><b>p.Info.BlockSize + partialProposalSize &lt;=&nbsp;p.Info.MaxBlockSize<br>p.Info.GasLimit + partialProposalGasLimit &lt;=&nbsp;p.Info.MaxGasLimit</b><br>"},{"parent":"884515e59ed1f155","children":[],"id":"2204ae380de55d61","title":"// 更新提案的BlockSize和GasLimit字段<br>p.Info.<b>BlockSize</b> = p.Info.BlockSize + partialProposalSize<br>p.Info.<b>GasLimit</b> = p.Info.GasLimit + partialProposalGasLimit"},{"parent":"884515e59ed1f155","children":[],"id":"38479a33c7bef6fb","title":"// 更新提案中此lane的信息：此lane加入了多少交易<br>p.Info.<b>TxsByLane[lane.Name()] </b>= uint64(len(<b>partialProposal</b>))"},{"parent":"884515e59ed1f155","children":[],"id":"8026d961b4884a24","title":"// 更新此提案<br><b>p.Txs = append(p.Txs, txs...)</b><br>for hash := range hashes {p.Cache[hash] = struct{}{}}"}],"id":"884515e59ed1f155","title":"<b>// 添加此lane的交易到本提案，<br>// 并更新本提案的</b>BlockSize和GasLimit<b><br>UpdateProposal</b>(Lane, <b>partialProposal</b>)<br>"}],"id":"32f9caa34979ba05","title":"<b>构建block的提案结构体<br>proposal</b><br>"},{"parent":"2c9bee92e41b0ea5","children":[{"parent":"792d5a5bf9bacb2f","children":[],"id":"4500f9833ae79979","title":"// 需要实现的接口：<br><b>Mempool</b> interface {<br>&nbsp; &nbsp;<b> sdkmempool.Mempool</b><br>&nbsp; &nbsp; <b>Registry</b>(ctx sdk.Context) ([]Lane, error)// returns the mempool's lane registry.<br>&nbsp; &nbsp; <b>Contains</b>(tx sdk.Tx) bool&nbsp;// returns true if any of the lanes currently contain the transaction.<br>&nbsp; &nbsp; <b>GetTxDistribution</b>() map[string]uint64&nbsp;// returns the number of transactions in each lane.<br>}<br>"},{"parent":"792d5a5bf9bacb2f","children":[],"id":"ecd00578d2cb3e41","title":"// 结构体<br>LanedMempool struct {<br><b>&nbsp; &nbsp; &nbsp;registry</b> []Lane // 按照顺序注册的lane<br>&nbsp; &nbsp; &nbsp;moduleLaneFetcher LaneFetcher<br>}<br>"},{"parent":"792d5a5bf9bacb2f","children":[{"parent":"ac1fb222662b4b4f","children":[],"id":"83bcbf479e0036ab","title":"mempool := &amp;<b>LanedMempool</b>{registry:&nbsp; &nbsp;lanes,moduleLaneFetcher: laneFetcher,}"},{"parent":"ac1fb222662b4b4f","children":[],"id":"a56a55daf27bba93","title":"mempool.<b>ValidateBasic</b>()"}],"id":"ac1fb222662b4b4f","title":"<b>NewLanedMempool</b>(lanes []Lane,laneFetcher LaneFetcher,)"}],"id":"792d5a5bf9bacb2f","title":"Mempool"}],"id":"2c9bee92e41b0ea5","title":"<b>Block</b>"},{"parent":"root","lineStyle":{"randomLineColor":"#80BA4C"},"children":[{"parent":"5860328171c38556","children":[],"id":"8680f58c2f704a79","title":"// 定义lane需要实现的接口<br><b>type Lane interface {</b><br><b>LaneMempool</b><br><br>//PrepareLane 构建块的一部分。它输入当前上下文、提案和调用链中下一个通道的函数。<br>该处理程序应根据需要更新上下文并将交易添加到提案中。通道应仅将交易添加到通道的最大块空间。<br><b>PrepareLane</b>(proposal proposals.Proposal,next PrepareLanesHandler,) (proposals.Proposal, error)<br><br>// ProcessLane 验证建议块的该通道部分。它输入当前上下文、提案、属于该通道的交易以及调用链中下一个通道的函数。<br>// 该处理程序应根据需要更新上下文并将交易添加到提案中。整个流程通道链最终应构建与准备通道链相同的提案。<br><b>ProcessLane</b>(proposal proposals.Proposal,txs []sdk.Tx,next ProcessLanesHandler,) (proposals.Proposal, error)<br><br><b>GetMaxBlockSpace</b>()&nbsp;// 以相对百分比形式返回车道的最大块空间。<br><b>SetMaxBlockSpace</b>()// 将车道的最大块空间设置为相对百分比。<br><b>Name</b>()// 返回车道的名称。<br><b>Match</b>(tx sdk.Tx) bool// 确定交易是否属于该通道。<br><b>GetTxInfo</b>(tx sdk.Tx)&nbsp;// 返回有关交易的各种信息：属于通道，包括其优先级、签名者、序列号、大小等。<br>"},{"parent":"5860328171c38556","children":[{"parent":"2f47e5a17cc7b309","children":[{"parent":"9f5be64c060ea47a","children":[],"id":"d3161cecf3abbb7b","title":"options := []base.<b>LaneOption</b>{base.WithMatchHandler(<b>matchHandler</b>),}"},{"parent":"9f5be64c060ea47a","children":[],"id":"044400096b9c86ed","title":"<b>lane</b> := base.<b>NewBaseLane</b>(cfg,LaneName,options...,)"}],"id":"9f5be64c060ea47a","title":"使用默认的match函数<br><b>NewDefaultLane</b>(cfg, matchHandler)<br>"}],"id":"2f47e5a17cc7b309","title":"Base"},{"parent":"5860328171c38556","children":[{"parent":"6ba9a3c739c559b7","children":[{"parent":"6b0806dc60f42664","children":[],"id":"edb95c74ece26e16","title":"<b>options</b> := []base.LaneOption{base.<b>WithMatchHandler</b>(<b><font color=\"#a23735\">matchFn</font></b>),base.<b>WithMempoolConfigs</b>[C](cfg, txPriority),}"},{"parent":"6b0806dc60f42664","children":[],"id":"26dcd8d05604d084","title":"<b>lane</b> := base.<b>NewBaseLane</b>(cfg,LaneName,<b>options</b>...,)"}],"id":"6b0806dc60f42664","title":"构建freelanes<br>NewFreeLane()<br>"},{"parent":"6ba9a3c739c559b7","children":[{"parent":"fcbddf007cec0289","children":[],"id":"d2ba544ae3d09ac5","title":"for _, msg := range tx.GetMsgs() {<br>&nbsp; &nbsp; switch msg.(type) {<br>&nbsp; &nbsp; &nbsp; &nbsp; case *types.<b>MsgDelegate</b>:&nbsp; &nbsp;return true<br>&nbsp; &nbsp; &nbsp; &nbsp; case *types.<b>MsgBeginRedelegate</b>:&nbsp; &nbsp; return true<br>&nbsp; &nbsp; &nbsp; &nbsp; case *types.<b>MsgCancelUnbondingDelegation</b>:&nbsp; return true<br>&nbsp; &nbsp; }<br>}"}],"id":"fcbddf007cec0289","title":"// 返回免费通道的默认匹配处理程序。默认实现匹配与质押相关的交易。<br>// MsgDelegate/MsgBeginRedelegate/MsgCancelUnbondingDelegation 的交易。<br><b><font color=\"#a23735\">DefaultMatchHandler</font></b>() base.MatchHandler<br>"}],"id":"6ba9a3c739c559b7","title":"Free"},{"parent":"5860328171c38556","children":[{"parent":"9588ff8379878db4","children":[{"parent":"a65b818dce8292bf","children":[],"id":"5c052b400a9e764b","title":"<b>Factory</b> interface {<br><b>&nbsp; &nbsp; WrapBundleTransaction</b>(tx []byte)&nbsp;// 定义一个将捆绑交易包装到 sdk.Tx 中的函数<br><b>&nbsp; &nbsp; GetAuctionBidInfo</b>(tx sdk.Tx) ()// 定义一个从拍卖交易中返回出价信息的函数。<br><b>&nbsp; &nbsp; MatchHandler</b>() base.MatchHandler// 定义一个检查交易是否与拍卖通道匹配的函数。<br>}"},{"parent":"a65b818dce8292bf","children":[{"parent":"79de1f31cebdb29c","children":[],"id":"d9df32111e889524","title":"<b>WrapBundleTransaction</b>(tx []byte) (sdk.Tx) {return config.txDecoder(tx)}"},{"parent":"79de1f31cebdb29c","children":[{"parent":"a395c6bec45973e9","children":[{"parent":"e26bd56361aaf38d","children":[],"id":"dc201d81ef835bbc","title":"<b>auctionBidMsgs</b> := make([]*auctiontypes.MsgAuctionBid, 0)<br><b>msg</b>.(*auctiontypes.<b>MsgAuctionBid</b>)<br>"},{"parent":"e26bd56361aaf38d","children":[],"id":"156aa8e520654867","title":"// 单个 MsgAuctionBid 消息交易<br>case len(<b>auctionBidMsgs</b>) == 1 &amp;&amp; len(tx.<b>GetMsgs</b>()) == 1:<br>&nbsp; &nbsp; return <b>auctionBidMsgs</b>[0], nil<br>"}],"id":"e26bd56361aaf38d","title":"<br>// 尝试从 sdk.Tx 中检索 <font color=\"#e855a4\">MsgAuctionBid</font>。<br><b><font color=\"#e855a4\">msg</font></b> := <b>GetMsgAuctionBidFromTx</b>(tx)<br>"},{"parent":"a395c6bec45973e9","children":[],"id":"77feac262ac657c4","title":"<b>bidder</b> := sdk.<b>AccAddressFromBech32</b>(msg.Bidder)"},{"parent":"a395c6bec45973e9","children":[],"id":"11d747585a3b27fe","title":"<b>height</b> := config.<b>GetTimeoutHeight</b>(tx)"},{"parent":"a395c6bec45973e9","children":[],"id":"effdef0f64289f81","title":"获取捆绑交易的所有签名账户<br><b>signers</b>, <b>timeouts</b> := config.<b>getBundleInfo</b>(<font color=\"#e855a4\"><b>msg</b></font>.Transactions)<br>"},{"parent":"a395c6bec45973e9","children":[],"id":"77daa99676e72332","title":"return &amp;types.<b>BidInfo</b>{<br>&nbsp; &nbsp; <b>Bid</b>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;msg.Bid,<br>&nbsp; &nbsp; <b>Bidder</b>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bidder,<br>&nbsp; &nbsp; <b>Transactions</b>:&nbsp; &nbsp; &nbsp; &nbsp; msg.Transactions,<br>&nbsp; &nbsp; <b>TransactionTimeouts</b>: timeouts,<br>&nbsp; &nbsp; <b>Timeout</b>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;height,<br>&nbsp; &nbsp; <b>Signers</b>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;signers,<br>}"}],"id":"a395c6bec45973e9","title":"<b>GetAuctionBidInfo</b>(<b>tx</b>) (*types.<b>BidInfo</b>)"},{"parent":"79de1f31cebdb29c","children":[{"parent":"17d8e8b091c3ae72","children":[],"id":"f7fb9264b7eb1d8a","title":"return <b>func</b>(ctx sdk.Context, tx sdk.Tx) bool {<br>&nbsp; &nbsp; <b>bidInfo</b>, := config.<b>GetAuctionBidInfo</b>(tx)<br>&nbsp; &nbsp; return <b>bidInfo</b> != nil &amp;&amp; err == nil<br>}"}],"id":"17d8e8b091c3ae72","title":"<b>MatchHandler</b>() base.MatchHandler"}],"id":"79de1f31cebdb29c","title":"<b>NewDefaultAuctionFactory</b>"}],"id":"a65b818dce8292bf","title":"// 捆绑交易包装器，<br>// 从bidtx中获取捆绑交易<br><b>AuctionFactory</b><br>"},{"parent":"9588ff8379878db4","children":[{"parent":"1405d15e3a231928","children":[],"id":"d3102f600205d999","title":"// 负责确定交易是否为竞标交易<br>// 以及如何从交易中提取相关信息（竞标、超时、投标人等）。<br><b>MEVLane</b> struct {*<b>base</b>.BaseLane<b>Factory</b>}<br>"},{"parent":"1405d15e3a231928","children":[{"parent":"35d88d793a437595","children":[{"parent":"acfe29662555e2d2","children":[],"id":"153d7c26ed972d4f","title":"// TxPriority 仅返回 mev 通道交易的 TxPriority。<br>mevlane交易的排序：按照bid出价高低排序"}],"id":"acfe29662555e2d2","title":"<b>options</b> := []base.LaneOption{<br>&nbsp; &nbsp; base.<b>WithMatchHandler(matchHandler),</b><br>&nbsp; &nbsp; base.<b>WithMempoolConfigs</b>[string](cfg, <b>TxPriority</b>(factory)),<br>}<br>"},{"parent":"35d88d793a437595","children":[],"id":"99906cad318a776b","title":"<b>baseLane</b>, := base.<b>NewBaseLane</b>(LaneName,<b>options</b>...,)"},{"parent":"35d88d793a437595","children":[],"id":"e08602709a343757","title":"<br>// 创建mev提案处理程序:挂接 <b><font color=\"#7bd144\">PrepareLaneHandler</font></b>/<b><font color=\"#569230\">ProcessLaneHandle</font></b>函数<br>handler := <b><font color=\"#7bd144\">NewProposalHandler</font></b>(baseLane, factory)<br><b>baseLane</b>.<b>WithOptions</b>(base.<b>WithPrepareLaneHandler</b>(handler.<b><font color=\"#7bd144\">PrepareLaneHandler</font></b>()),base.<b>WithProcessLaneHandler</b>(handler.<b><font color=\"#569230\">ProcessLaneHandle</font></b>,)"},{"parent":"35d88d793a437595","children":[],"id":"97774e7f8f2f9930","title":"return &amp;MEVLane{BaseLane: <b>baseLane</b>,Factory:&nbsp; <b>factory</b>,}<br>"}],"id":"35d88d793a437595","title":"NewMEVLane()"}],"id":"1405d15e3a231928","title":"MEVLane"},{"parent":"9588ff8379878db4","children":[{"parent":"d4a0ce573a44b8e5","children":[],"id":"b2afd0664045df9e","title":"type <b>ProposalHandler</b> struct {<b>lane</b>&nbsp;*base.BaseLane<b>factory</b> Factory}"},{"parent":"d4a0ce573a44b8e5","children":[{"parent":"c886b261a3aaadc3","children":[{"parent":"45e7df0bc963d76d","children":[],"id":"667465b5848b54bb","title":"<b>bidTx</b> := iterator.Tx()"},{"parent":"45e7df0bc963d76d","children":[],"id":"ae7bd0cbaa3fc308","title":"h.lane.<b>Match</b>(bidTx)&nbsp;"},{"parent":"45e7df0bc963d76d","children":[{"parent":"ed28ff8435b11706","children":[],"id":"607fb6d687e46c5a","title":"// 验证交易是否为竞标交易。<br>bidInfo := h.factory.<b>GetAuctionBidInfo</b>(bidTx)"},{"parent":"ed28ff8435b11706","children":[{"parent":"ca3398f3947eedef","children":[],"id":"3d9c3d9fa5c8b3e4","title":"return utils.<b>TxWithInfo</b>{<br>&nbsp; &nbsp; Hash:&nbsp; &nbsp; &nbsp;strings.ToUpper(hex.EncodeToString(comettypes.Tx(txBytes).Hash())),<br>&nbsp; &nbsp; Size:&nbsp; &nbsp; &nbsp;int64(len(txBytes)),<br>&nbsp; &nbsp; GasLimit: gasTx.GetGas(),<br>&nbsp; &nbsp; TxBytes:&nbsp; txBytes,<br>&nbsp; &nbsp; Priority: l.LaneMempool.Priority(ctx, tx),<br>&nbsp; &nbsp; Signers:&nbsp; signers,<br>}"}],"id":"ca3398f3947eedef","title":"计算bidtx的基本信息：hash，size，gaslimit<br><b>txInfo</b> := h.lane.<b>GetTxInfo</b>(bidTx)<br>"},{"parent":"ed28ff8435b11706","children":[],"id":"567b162bd8757922","title":"<b>// 计算总的size和gaslimit值<br>totalSize</b> := txInfo.Size<br><b>totalGasLimit</b> := txInfo.GasLimit<br><b>bundle</b> := make([]sdk.Tx, len(bidInfo.Transactions))<br>"},{"parent":"ed28ff8435b11706","children":[{"parent":"1670050cd1802d29","children":[],"id":"fa212a4ca992081d","title":"包装捆绑交易<br><b>bundledTx</b> := h.factory.<b>WrapBundleTransaction</b>(bundledTxBz)<br>"},{"parent":"1670050cd1802d29","children":[],"id":"e6f20d6f5bce8ae0","title":"<b>获取捆绑交易的hash，size，gaslimit，</b>Priority<b><br>bundledTxInfo</b> := h.lane.<b>GetTxInfo</b>(<b>bundledTx</b>)<br>"},{"parent":"1670050cd1802d29","children":[],"id":"79027acd6d65f32e","title":"统计捆绑交易的size和gaslimit<br><b>totalSize</b> += bundledTxInfo.<b>Size</b><br><b>totalGasLimit</b> += bundledTxInfo.<b>GasLimit</b><br><b>bundle</b>[index] = <b>bundledTx</b><br>"}],"id":"1670050cd1802d29","title":"// 计算捆绑交易的size和 gaslimit值。<br>for index, <b>bundledTxBz</b> := range bidInfo.<b>Transactions</b> {<br><br>}"},{"parent":"ed28ff8435b11706","children":[],"id":"b5b0466ac35a715e","title":"bidTx和捆绑交易的总size和gaslimit满足提案要求<br><b>totalSize</b> &lt;= limit.<b>MaxTxBytes</b>&nbsp;<br><b>totalGasLimit</b> &lt;= limit.<b>MaxGasLimit</b><br>"},{"parent":"ed28ff8435b11706","children":[],"id":"bab1bddfc108c40b","title":"return <b>bundle</b>"}],"id":"ed28ff8435b11706","title":"<b>// 验证bidTx及捆绑交易的基本信息合法：size，gas<br>bundle</b> := h.<b>VerifyBidBasic</b>(<b>bidTx</b>, <b>proposal</b>, limit)<br>"},{"parent":"45e7df0bc963d76d","children":[{"parent":"c131a2da195b7104","children":[{"parent":"9e10f6312b6d70ee","children":[],"id":"0e715f6433b80658","title":"l.cfg.<b>AnteHandler</b>(tx, simulate)"}],"id":"9e10f6312b6d70ee","title":"h.lane.<b>VerifyTx</b>( bidTx, false)"},{"parent":"c131a2da195b7104","children":[],"id":"c7fb449ae2acb2bc","title":"// 验证所有捆绑交易<br>for _, bundledTx := range bundle {<br>&nbsp; &nbsp;&nbsp;h.lane.<b>Match</b>(<b>bundledTx</b>)<br>&nbsp; &nbsp;&nbsp;h.lane.<b>VerifyTx</b>(<b>bundledTx</b>, false)<br>}"}],"id":"c131a2da195b7104","title":"// 验证bidTx以及捆绑交易合法<br>h.<b>VerifyBidTx</b>(<b>bidTx</b>, <b>bundle</b>)<br>"},{"parent":"45e7df0bc963d76d","children":[],"id":"a39a3130074da6c4","title":"// 此时，出价交易本身和所有捆绑交易均有效。<br>// 因此，我们选择出价交易以及所有捆绑交易。<br><b><font color=\"#7bd144\">txsToInclude</font></b> = append(<b><font color=\"#7bd144\">txsToInclude</font></b>, <b><font color=\"#95da69\">bidTx</font></b>)<br><b><font color=\"#7bd144\">txsToInclude</font></b> = append(<b><font color=\"#7bd144\">txsToInclude</font></b>, <b><font color=\"#b0e38f\">bundle</font></b>...)<br>"}],"id":"45e7df0bc963d76d","title":"// 迭代遍历此lane的所有交易，<br>// 按顺序从出价最高的bidTx开始<br>for <b>iterator</b> := h.lane.<b>Select</b>(); <br>&nbsp; &nbsp; &nbsp; &nbsp; iterator != nil; <br>&nbsp; &nbsp; &nbsp; &nbsp; iterator = iterator.Next() {<br>}<br>return <b><font color=\"#7bd144\">txsToInclude</font></b>, <b>txsToRemove</b><br>"}],"collapsed":true,"id":"c886b261a3aaadc3","title":"// 尝试将最高出价交易包含到区块提案中：<br>// 本交易以及捆绑交易都有效。<br>// 区块提案中交易顺序案例：<br>// bidtx-1(tx1-1-byte,tx1-2-byte,tx1-3-byte),tx1-1,tx1-2,tx1-3,<br>//&nbsp;bidtx-2(tx2-1-byte,tx2-2-byte,tx2-3-byte),tx2-1,tx2-2,tx2-3<br><b><font color=\"#7bd144\">PrepareLaneHandler</font></b>() base.PrepareLaneHandler<br>"},{"parent":"d4a0ce573a44b8e5","children":[{"parent":"052d225edc844692","children":[],"id":"501e7a043b426925","title":"bidTx := <b>partialProposal</b>[0]"},{"parent":"052d225edc844692","children":[],"id":"0114d343ae3b1a24","title":"bidTx属于此lane<br>h.lane.<b>Match</b>&nbsp;<b>bidTx</b>)<br>"},{"parent":"052d225edc844692","children":[],"id":"79e69dabfbb3e9fa","title":"验证可以从中获取拍卖出价交易<br><b>bidInfo</b> := h.factory.<b>GetAuctionBidInfo</b>(<b>bidTx</b>)<br>"},{"parent":"052d225edc844692","children":[],"id":"7dd4abb9ddfe6655","title":"// 检查是否包含所有捆绑交易。<br><b>bundleSize</b> := len(<b>bidInfo</b>.<b>Transactions</b>) + 1"},{"parent":"052d225edc844692","children":[],"id":"cc3265a49551aa18","title":"<b>// 本bidtx的捆绑交易紧跟在其后<br>bundle</b> := <b>partialProposal</b>[1:<b>bundleSize</b>]<br>"},{"parent":"052d225edc844692","children":[],"id":"f87f517e6c23df0d","title":"// 校验捆绑交易都合法,bidtx中的捆绑交易和紧跟其后的交易匹配<br>for <b>index</b>, <b>bundledTxBz</b> := range bidInfo.<b>Transactions</b> {<br>&nbsp; &nbsp;&nbsp;bundledTx, err := h.factory.WrapBundleTransaction(bundledTxBz)<br>&nbsp; &nbsp;&nbsp;expectedTxBz, err := h.lane.TxEncoder()(bundledTx)<br>&nbsp; &nbsp;&nbsp;actualTxBz, err := h.lane.TxEncoder()(bundle[index])<br>&nbsp; &nbsp;&nbsp;<b>bytes.Equal(actualTxBz, expectedTxBz)</b><br>}<br>"},{"parent":"052d225edc844692","children":[],"id":"2fdde3a312229d0b","title":"验证bidtx合法<br>h.<b>VerifyBidTx</b>(bidTx, bundle)<br>"},{"parent":"052d225edc844692","children":[],"id":"a5c994fa8aed04d3","title":"return <b>partialProposal</b>[:<b>bundleSize</b>], <b>partialProposal</b>[<b>bundleSize</b>:], nil"}],"id":"052d225edc844692","title":"// 确保包含来自 mev 通道的交易的区块提案有效。<br>// 1. 如果第一笔交易与通道不匹配，则提案中不应包含任何其他 MEV 交易。<br>// 2. 出价交易必须有效。3. 捆绑交易必须有效。4. 捆绑交易不能是出价交易。<br>// 5. 捆绑交易必须与区块提案中的交易匹配，其顺序与出价交易中定义的顺序相同。<br>// 返回：<b><font color=\"#7bd144\">txsFromLane</font></b>, <b>remainingTxs</b><br><b><font color=\"#569230\">ProcessLaneHandler</font></b>() base.ProcessLaneHandler<br>"}],"id":"d4a0ce573a44b8e5","title":"<b>ABCI:ProposalHandler</b>"}],"id":"9588ff8379878db4","title":"<b>Mev</b>"}],"id":"5860328171c38556","title":"<b>Lane</b>"},{"parent":"root","lineStyle":{"randomLineColor":"#FD5155"},"children":[{"parent":"4d70d73dad33","children":[{"parent":"db57d00186b156d8","children":[{"parent":"ed3e8154e612e2dd","children":[{"parent":"ac4ac0aa1c26f394","children":[],"id":"7f9e6ea1034db46e","title":"<b>type <font color=\"#e855a4\">MsgAuctionBid</font> struct {</b><br><b>&nbsp; &nbsp; Bidder</b> string // bidder 是向拍卖提交出价的帐户的地址。<br><b>&nbsp; &nbsp; Bid</b> types.Coin // bid 是投标人为参与拍卖而出价的代币数量。<br><b>&nbsp; &nbsp;Transactions</b> [][]byte&nbsp;// 交易是投标人想要捆绑在一起的交易的字节。<br>}"},{"parent":"ac4ac0aa1c26f394","children":[],"id":"b114cd4e5723e844","title":"试例：拍卖出价者对捆包交易出价<br>Use:&nbsp; &nbsp;\"auction-bid [<b>bidder</b>] [<b>bid</b>] [<b>bundled_tx1</b>,bundled_tx2,...,bundled_txN]\",<br>Example: \"auction-bid cosmos1... 10000uatom 0xFF...,0xCC...,0xAA...\",<br>"},{"parent":"ac4ac0aa1c26f394","children":[{"parent":"99bfe0bf336ade36","children":[],"id":"ab373f55db148431","title":"ctx.EventManager().EmitEvent(<br>&nbsp; &nbsp; sdk.NewEvent(<br>&nbsp; &nbsp; &nbsp; &nbsp; types.<b>EventTypeAuctionBid</b>,<br>&nbsp; &nbsp; &nbsp; &nbsp; sdk.NewAttribute(types.<b>EventAttrBidder</b>, msg.Bidder),<br>&nbsp; &nbsp; &nbsp; &nbsp; sdk.NewAttribute(types.<b>EventAttrBid</b>, msg.Bid.String()),<br>&nbsp; &nbsp; &nbsp; &nbsp; sdk.NewAttribute(types.<b>EventAttrBundledTxs</b>, strings.Join(bundledTxHashes, \",\")),),<br>)"}],"id":"99bfe0bf336ade36","title":"只发出一个拍卖出价的事件，<br>出价在antehandler中提取。<br><b>AuctionBid</b>(msg *types.MsgAuctionBid)<br>"}],"id":"ac4ac0aa1c26f394","title":"使用签名捆绑交易列表创建拍卖出价交易，<br>其中每笔交易都是签名交易的十六进制编码字符串<br><b>NewAuctionBidTx()</b><br>"}],"id":"ed3e8154e612e2dd","title":"<b>tx</b>"},{"parent":"db57d00186b156d8","children":[{"parent":"07b6f8dd8803c062","children":[],"id":"4f2799b3602f1205","title":"CmdQueryParams(),"}],"id":"07b6f8dd8803c062","title":"<b>query</b>"}],"id":"db57d00186b156d8","title":"<b>Client</b>"},{"parent":"4d70d73dad33","children":[{"parent":"a346c6aca2fd2dd2","children":[],"id":"03b718d8bef0b7cf","title":"<b>AuctionDecorator</b> struct {<br>&nbsp; &nbsp; <b>lane</b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b><font color=\"#e74f4c\">MEVLane</font></b><br>&nbsp; &nbsp; <b>auctionkeeper</b> AuctionKeeper<br>&nbsp; &nbsp; <b>txEncoder</b>&nbsp; &nbsp; &nbsp;sdk.TxEncoder<br>}"},{"parent":"a346c6aca2fd2dd2","children":[],"id":"2d8b01fef596b415","title":"// AnteHandle 验证拍卖出价是否有效。 如果有效，将从投标人的帐户中扣除入场费。<br>auctionante.<b>NewAuctionDecorator</b>(options.<b>auctionkeeper</b>, options.TxEncoder, options.<b>MEVLane</b>),<br>"},{"parent":"a346c6aca2fd2dd2","children":[{"parent":"f9df3f9a0742f818","children":[],"id":"70d88bc547960edf","title":"<b>bidInfo</b> := ad.lane.<b>GetAuctionBidInfo</b>(tx)"},{"parent":"f9df3f9a0742f818","children":[],"id":"cc71686d4d68680d","title":"// 拍卖交易必须将超时设置为有效的区块高度。<br><b>ValidateTimeout</b>(int64(bidInfo.Timeout))<br>"},{"parent":"f9df3f9a0742f818","children":[],"id":"0f97cfa0ca981b97","title":"// 仅在必要时将出价与最高出价进行比较。<br>// 获取本lane的最高出价bid交易<br><b>topBidTx</b> = ad.lane.<b>GetTopAuctionTx</b>()<br><b>topBidInfo</b> := ad.lane.<b>GetAuctionBidInfo</b>(<b>topBidTx</b>)<br><b>topBid</b> = topBidInfo.<b>Bid</b><br>"},{"parent":"f9df3f9a0742f818","children":[{"parent":"4b219fa5ad2bda16","children":[],"id":"870fc172035cc50b","title":"<br>// 验证捆绑包大小。<br><b>maxBundleSize</b>&nbsp;:= k.<b>GetMaxBundleSize</b>(ctx)<br>(len(bidInfo.<b>Transactions</b>)) &lt;=&nbsp; <b>maxBundleSize</b>&nbsp;"},{"parent":"4b219fa5ad2bda16","children":[{"parent":"9eb32c3465c97808","children":[],"id":"6665000080cb88fa","title":"// 获取拍卖出价底价从模块参数<br>reserveFee := k.<b>GetReserveFee</b>(ctx)<br>"},{"parent":"9eb32c3465c97808","children":[],"id":"eb7903b790b7a28c","title":"// 确保出价面额与费用面额相匹配.<br><b>bid.Denom</b> == reserveFee.<b>Denom</b>"},{"parent":"9eb32c3465c97808","children":[],"id":"0738e84f80efd10d","title":"// 出价必须高于最低出价。<br><b>bid</b>.IsGTE(<b>reserveFee</b>)"},{"parent":"9eb32c3465c97808","children":[],"id":"4a744186dde14940","title":"// 获取最低出价增值<br><b>minBidIncrement</b> := k.<b>GetMinBidIncrement</b>()<br>"},{"parent":"9eb32c3465c97808","children":[],"id":"008d2ee703037d93","title":"// 确保出价大于最高出价 + 最低出价增量。<br><b>minBid</b> := <b>highestBid</b>.Add(<b>minBidIncrement</b>)<br><b>bid</b>.IsGTE(<b>minBid</b>)<br>"},{"parent":"9eb32c3465c97808","children":[{"parent":"64fc3d61c64c1a42","children":[],"id":"8f1324436944199a","title":"// 获取模块的托管账户<br>params := k.<b>GetParams</b>(ctx)<br><b>escrowAddress</b> := sdk.<b>AccAddress</b>(params.EscrowAccountAddress)<br>"},{"parent":"64fc3d61c64c1a42","children":[],"id":"b02d16102a6bedce","title":"// 将拍卖利润的一部分分派给区块提案者<br><b>rewardsAddress</b> := k.rewardsAddressProvider.<b>GetRewardsAddress</b>()<br><b>bid</b> := sdk.<b>NewDecCoinsFromCoins</b>(bid)<br><b>proposerReward</b>, _ = bid.MulDecTruncate(params.<b>ProposerFee</b>)<br>k.bankKeeper.<b>SendCoins</b>(<b>bidder</b>, <b>rewardsAddress</b>, <b>proposerReward</b>);<br>"},{"parent":"64fc3d61c64c1a42","children":[],"id":"404334d88a77e3e8","title":"// 将出价的剩余部分分配给拍卖模块的托管账户<br><b>escrowReward</b>&nbsp;:= <b>bid</b>.<b>Sub</b>(proposerReward)<br>k.bankKeeper.<b>SendCoins</b>(<b>bidder</b>, <b>escrowAddress</b>, <b>escrowReward</b>)<br>"}],"id":"64fc3d61c64c1a42","title":"// 从投标人处提取出价。<br>k.<b>ExtractBid</b>(<b>bidder</b>, <b>bid</b>)"}],"id":"9eb32c3465c97808","title":"// 验证竞标者是否有足够的资金参与拍卖，以及竞标金额是否足够高。<br>k.<b>ValidateAuctionBid</b>(bidInfo.Bidder, bidInfo.<b>Bid</b>, <b>highestBid</b>);&nbsp;<br>"},{"parent":"4b219fa5ad2bda16","children":[],"id":"acdaf8561f7db536","title":"// 如果启用了抢先交易保护，则验证交易包。<br>k.<b>ValidateAuctionBundle</b>(bidInfo.<b>Bidder</b>, bidInfo.<b>Signers</b>)"},{"parent":"4b219fa5ad2bda16","children":[{"parent":"7a1e676554754589","children":[],"id":"586c4552d401b804","title":"子主题"}],"id":"7a1e676554754589","title":"// 验证捆绑包中的交易超时。<br>k.<b>ValidateBundleTimeouts</b>(<b>bidInfo</b>)"}],"id":"4b219fa5ad2bda16","title":"// 验证本次出价交易是否可以包含在拍卖中。<br>ad.<b>auctionkeeper</b>.<b>ValidateBidInfo</b>(<b>topBid</b>, <b>bidInfo</b>)<br>"},{"parent":"f9df3f9a0742f818","children":[],"id":"831d1f5434e0f600","title":"return <b>next</b>(ctx, tx, simulate)"}],"id":"f9df3f9a0742f818","title":"<b>AnteHandle</b>(<b>tx</b>, <b>next</b> sdk.AnteHandler)"}],"id":"a346c6aca2fd2dd2","title":"注册拍卖出价的ante处理<br><b>ante</b><br>"},{"parent":"4d70d73dad33","children":[{"parent":"53edf4577146546b","children":[],"id":"08112c479a9b11d4","title":"type <b>Params</b> struct {<br>&nbsp; &nbsp; <b>MaxBundleSize</b> uint32&nbsp;// 单个捆绑包中可以捆绑的最大交易数量。<br>&nbsp; &nbsp; <b>EscrowAccountAddress</b> []byte // 是将收到部分竞标收益的账户地址。<br>&nbsp; &nbsp; <b>ReserveFee</b> types.Coin // reserve_fee 指定拍卖的出价底价。<br>&nbsp; &nbsp; <b>MinBidIncrement</b> types.Coin&nbsp;// 指定下一个出价必须大于前一个出价的最小金额。<br>&nbsp; &nbsp; <b>FrontRunningProtection</b> bool // 指定是否启用抢先交易和夹层攻击保护。<br>&nbsp; &nbsp; <b>ProposerFee</b>&nbsp;// 定义中标出价中分配给提出区块的区块提议者的部分。<br>}"},{"parent":"53edf4577146546b","children":[{"parent":"668f1c418baa490d","children":[],"id":"bf68e6925ba8dc50","title":"return <b>Params</b>{<br>&nbsp; &nbsp; MaxBundleSize:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; maxBundleSize,<br>&nbsp; &nbsp; EscrowAccountAddress:&nbsp; &nbsp;escrowAccountAddress,<br>&nbsp; &nbsp; ReserveFee:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;reserveFee,<br>&nbsp; &nbsp; MinBidIncrement:&nbsp; &nbsp; &nbsp; &nbsp; minBidIncrement,<br>&nbsp; &nbsp; FrontRunningProtection: frontRunningProtection,<br>&nbsp; &nbsp; ProposerFee:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; proposerFee,<br>}"},{"parent":"668f1c418baa490d","children":[],"id":"d4179baab21d8bc2","title":"var (<br>&nbsp; &nbsp; <b>DefaultMaxBundleSize</b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; uint32 = 2<br>&nbsp; &nbsp; <b>DefaultEscrowAccountAddress</b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = authtypes.NewModuleAddress(<b>ModuleName</b>)<br>&nbsp; &nbsp; <b>DefaultReserveFee</b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; = sdk.NewCoin(\"stake\", math.NewInt(1))<br>&nbsp; &nbsp; <b>DefaultMinBidIncrement</b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= sdk.NewCoin(\"stake\", math.NewInt(1))<br>&nbsp; &nbsp; <b>DefaultFrontRunningProtection</b>&nbsp; &nbsp; &nbsp; &nbsp; = true<br>&nbsp; &nbsp; <b>DefaultProposerFee</b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;= math.<b>LegacyNewDec</b>(0)<br>)"}],"id":"668f1c418baa490d","title":"<b>DefaultParams</b>()"}],"id":"53edf4577146546b","title":"<b>Params</b>"},{"parent":"4d70d73dad33","children":[{"parent":"412baf72c2509651","children":[{"parent":"565122154d368c12","children":[{"parent":"c690f37f2e1c197d","children":[{"parent":"fd0f6129392b34ab","children":[],"id":"ccad0b73f8de94ec","title":"// 先前区块提案者的共识账户<br>prevPropConsAddr := p.distrKeeper.<b>GetPreviousProposerConsAddr</b>()<br>"},{"parent":"fd0f6129392b34ab","children":[],"id":"46dd34c078585de3","title":"// 获取对应的验证节点地址<br>prevProposer := p.stakingKeeper.<b>GetValidatorByConsAddr</b>(<b>prevPropConsAddr</b>)<br>"},{"parent":"fd0f6129392b34ab","children":[],"id":"f89141c8d24af537","title":"// 获取对应的操作者账户地址<br>return sdk.<b>AccAddressFromBech32</b>(<b>prevProposer</b>.<b>GetOperator</b>())<br>"}],"id":"fd0f6129392b34ab","title":"<b>GetRewardsAddress</b>()"}],"id":"c690f37f2e1c197d","title":"// 提案奖励分发<br><b>ProposerRewardsAddressProvider</b> struct {<br>&nbsp; &nbsp; <b>distrKeeper</b>&nbsp; &nbsp;types.DistributionKeeper<br>&nbsp; &nbsp; <b>stakingKeeper</b> types.StakingKeeper<br>}<br>"}],"id":"565122154d368c12","title":"<b>Keeper</b>{cdc:&nbsp; cdc,storeKey:&nbsp; &nbsp;storeKey,<br>&nbsp; &nbsp; <b>bankKeeper</b>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;bankKeeper,<br>&nbsp; &nbsp; <b>rewardsAddressProvider</b>: rewardsAddressProvider,<br>&nbsp; &nbsp; <b>authority</b>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; authority,<br>}"}],"id":"412baf72c2509651","title":"<b>Keeper</b>"}],"id":"4d70d73dad33","title":"<b>x/auction</b>"}],"root":true,"theme":"delicate_caihong","showWatermark":false,"id":"root","title":"skip-mev-block-sdk","version":1217,"structure":"mind_free"}},"meta":{"exportTime":"2024-06-03 15:02:32","member":"","diagramInfo":{"creator":"","created":"2024-05-21 15:09:03","modified":"2024-06-03 15:02:20","title":"skip-mev-block-sdk","category":"mind_free"},"id":"664c488f5d23633713188bed","type":"ProcessOn Schema File","version":"5.0"}}